// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package connector_paradym.actions;

import java.util.Iterator;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.thirdparty.org.json.JSONArray;
import com.mendix.thirdparty.org.json.JSONObject;
import com.mendix.webui.CustomJavaAction;

/**
 * modify JSON structure to avoid variable keys that are not supported by import mapping.
 * 
 * Define the parent of the variable keys, the java action will re-structure all JsonObjects or JsonsArrays , and turn variable keys into values of a static key.
 * 
 */
public class JsonVariableKeysToArray extends CustomJavaAction<java.lang.String>
{
	private java.lang.String JSON_input;
	private java.lang.String Parent_Of_VariableKey;
	private java.lang.String NewStaticKey;

	public JsonVariableKeysToArray(IContext context, java.lang.String JSON_input, java.lang.String Parent_Of_VariableKey, java.lang.String NewStaticKey)
	{
		super(context);
		this.JSON_input = JSON_input;
		this.Parent_Of_VariableKey = Parent_Of_VariableKey;
		this.NewStaticKey = NewStaticKey;
	}

	@java.lang.Override
	public java.lang.String executeAction() throws Exception
	{
		// BEGIN USER CODE
		JSONObject json = new JSONObject(this.JSON_input);
		findParentAndReplace(Parent_Of_VariableKey ,  json );
		String json_string_result = json.toString();
		return json_string_result;
		

		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "JsonVariableKeysToArray";
	}

	// BEGIN EXTRA CODE
	public  void findParentAndReplace(java.lang.String Parent_Of_VariableKey , JSONObject GrandParent ) {
		// Try to find specified parent
		JSONObject Parent = null;
		try {
			Parent = GrandParent.getJSONObject(Parent_Of_VariableKey);		
		} catch (Exception e) {
		      //System.out.println("Something went wrong.");
	    }
		if (Parent == null ) {
			// If parent is not found, parse all children nodes and make recursive call
			Iterator<String> ChildrenNodes = GrandParent.keys();
			while ( ChildrenNodes.hasNext() ) {
				String ChildNodeKey = ChildrenNodes.next();
				try {
					JSONObject ChildNode = GrandParent.getJSONObject(ChildNodeKey);
					findParentAndReplace(Parent_Of_VariableKey ,  ChildNode );
				} catch (Exception e) {
					try {
						JSONArray ChildArray = GrandParent.getJSONArray(ChildNodeKey);
						for (int i = 0; i < ChildArray.length(); i++) {
							JSONObject ChildArrayObject = ChildArray.getJSONObject(i);
							findParentAndReplace(Parent_Of_VariableKey ,  ChildArrayObject );
						}	
						
					} catch (Exception f) {
						
					}
				}
			}
			
			
		} else {
			// If parent is  found, parse variable keys , manage cases where it's an object or an array , replace variable key to static key
			JSONArray restructured_parent = new JSONArray();
			Iterator<String> iter = Parent.keys();
			while ( iter.hasNext() ) {
				String key = iter.next();
				try {
					JSONObject o = Parent.getJSONObject(key);
					o.put(this.NewStaticKey, key);
					restructured_parent.put(o);					
				} catch (Exception e) {
					  //System.out.println("Something went wrong.");
					try {					
						JSONArray Array = Parent.getJSONArray(key);
						for (int i = 0; i < Array.length(); i++) {
							JSONObject o = Array.getJSONObject(i);
							o.put(this.NewStaticKey, key);
							restructured_parent.put(o);
						}					
				} catch (Exception f) {
					      //System.out.println("Something went wrong.");
					}			    
				}
				
			}
			GrandParent.put(this.Parent_Of_VariableKey, restructured_parent);
			return ;
			
		}
					

		
		return ;
		
	}
	// END EXTRA CODE
}
